<?xml version="1.0" encoding="UTF-8"?>

<project name="Moodle Plugin CI Install" description="Use targets from this Phing file for the 'install' section of the .travis.yml file.  Only call one target." default="Install">
    <resolvepath propertyName="BUILD_DIR" file="${project.basedir}/.." description="Where everything is built, like Moodle"/>
    <property name="TRAVIS_BUILD_DIR" value="${env.TRAVIS_BUILD_DIR}" description="This is where Travis cloned the plugin"/>
    <property name="MOODLE_BRANCH" value="${env.MOODLE_BRANCH}" description="The Moodle git branch to clone"/>
    <property name="DB" value="${env.DB}" description="The Moodle DB driver to use: mysqli or pgsql only"/>
    <property name="MOODLE_DIR" value="${BUILD_DIR}/moodle" description="Directory where Moodle is cloned to"/>
    <property name="MOODLE_DATA_DIR" value="${BUILD_DIR}/moodledata" description="Absolute path to Moodle data directory"/>
    <property name="MOODLE_PHPUNIT_DATA_DIR" value="${BUILD_DIR}/phpu_moodledata" description="Absolute path to PHPUnit data directory"/>
    <property name="MOODLE_BEHAT_DATA_DIR" value="${BUILD_DIR}/behat_moodledata" description="Absolute path to Behat data directory"/>
    <property name="PROPERTIES_FILE" value="${project.basedir}/build.properties" description="Location of the build properties file"/>
    <property name="MOODLE_CODE_CHECKER_VERSION" value="master" description="The version to checkout"/>
    <property name="IGNORE_PATHS" value="" description="CSV of file paths to ignore"/>
    <property name="IGNORE_NAMES" value="" description="CSV of file names to ignore"/>

    <!-- These properties are read from the properties file. -->
    <property name="PHPUNIT_ENABLED" value="false" description="If the plugin has PHPUnit tests"/>
    <property name="BEHAT_ENABLED" value="false" description="If the plugin has Behat tests"/>

    <!-- Determine if Moodle exists already. -->
    <available property="MOODLE_EXISTS" file="${MOODLE_DIR}"/>

    <!-- Setup some properties based on the DB type. -->
    <if>
        <equals arg1="${DB}" arg2="pgsql"/>
        <then>
            <property name="DB.USER" value="postgres"/>
            <property name="DB.PASS" value=""/>
            <property name="DB.CREATE" value="psql -c 'CREATE DATABASE moodle;' -U postgres"/>
        </then>
        <elseif>
            <equals arg1="${DB}" arg2="mysqli"/>
            <then>
                <property name="DB.USER" value="root"/>
                <property name="DB.PASS" value=""/>
                <property name="DB.CREATE" value="mysql -e 'CREATE DATABASE moodle DEFAULT CHARACTER SET UTF8 COLLATE UTF8_bin;'"/>
            </then>
        </elseif>
        <else>
            <property name="UNKNOWN_DB" value="true"/>
        </else>
    </if>

    <!-- Optional environment variables. -->
    <if>
        <isset property="env.IGNORE_PATHS"/>
        <then>
            <property name="IGNORE_PATHS" value="{env.IGNORE_PATHS}" override="true"/>
        </then>
    </if>
    <if>
        <isset property="env.IGNORE_NAMES"/>
        <then>
            <property name="IGNORE_NAMES" value="${env.IGNORE_NAMES}" override="true"/>
        </then>
    </if>

    <target name="Install" description="Builds Moodle and detect dependencies to install" depends="ReportProperties">
        <phingcall target="InstallMoodle"/>

        <!-- Loads up the values for BEHAT_ENABLED and PHPUNIT_ENABLED. -->
        <property file="${PROPERTIES_FILE}" override="true"/>

        <if>
            <istrue value="${BEHAT_ENABLED}"/>
            <then>
                <phingcall target="BehatDependencies"/>
            </then>
        </if>
        <if>
            <istrue value="${PHPUNIT_ENABLED}"/>
            <then>
                <phingcall target="PHPUnitDependencies"/>
            </then>
        </if>

        <phingcall target="OtherDependencies"/>
    </target>

    <target name="ReportProperties" hidden="true">
        <!-- Helps with debugging. -->
        <echo message="BUILD_DIR: ${BUILD_DIR}"/>
        <echo message="TRAVIS_BUILD_DIR: ${TRAVIS_BUILD_DIR}"/>
        <echo message="MOODLE_BRANCH: ${MOODLE_BRANCH}"/>
        <echo message="MOODLE_DIR: ${MOODLE_DIR}"/>
        <echo message="MOODLE_DATA_DIR: ${MOODLE_DATA_DIR}"/>
        <echo message="MOODLE_PHPUNIT_DATA_DIR: ${MOODLE_PHPUNIT_DATA_DIR}"/>
        <echo message="MOODLE_BEHAT_DATA_DIR: ${MOODLE_BEHAT_DATA_DIR}"/>
        <echo message="PROPERTIES_FILE: ${PROPERTIES_FILE}"/>
        <echo message="DB: ${DB}"/>
        <echo message="DB.USER: ${DB.USER}"/>
        <echo message="DB.PASS: ${DB.PASS}"/>
    </target>

    <target name="InstallMoodle" hidden="true">
        <!-- Unknown DB or already installed Moodle can fail the build. -->
        <fail if="UNKNOWN_DB" message="Unsupported ${DB} used, only supports mysqli and pgsql"/>
        <fail if="MOODLE_EXISTS" message="Moodle has already been installed at ${MOODLE_DIR}"/>

        <!-- Clone Moodle. -->
        <echo message="Cloning Moodle"/>
        <exec command="git clone --depth=1 --branch ${MOODLE_BRANCH} git://github.com/moodle/moodle ${MOODLE_DIR}" passthru="true" checkreturn="true" level="info"/>

        <!-- Create data directories -->
        <echo message="Creating Moodle data directories"/>
        <mkdir dir="${MOODLE_DATA_DIR}" mode="777"/>
        <mkdir dir="${MOODLE_PHPUNIT_DATA_DIR}" mode="777"/>
        <mkdir dir="${MOODLE_BEHAT_DATA_DIR}" mode="777"/>

        <!-- Build Moodle config file. -->
        <echo message="Creating Moodle's config file"/>
        <copy file="${project.basedir}/res/template/config.php.txt" tofile="${MOODLE_DIR}/config.php">
            <filterchain>
                <replacetokens begintoken="{{" endtoken="}}">
                    <token key="DBTYPE" value="${DB}"/>
                    <token key="DBLIBRARY" value="native"/>
                    <token key="DBHOST" value="localhost"/>
                    <token key="DBNAME" value="moodle"/>
                    <token key="DBUSER" value="${DB.USER}"/>
                    <token key="DBPASS" value="${DB.PASS}"/>
                    <token key="WWWROOT" value="http://localhost/moodle"/>
                    <token key="DATAROOT" value="${MOODLE_DATA_DIR}"/>
                    <token key="PHPUNITDATAROOT" value="${MOODLE_PHPUNIT_DATA_DIR}"/>
                    <token key="BEHATDATAROOT" value="${MOODLE_BEHAT_DATA_DIR}"/>
                    <token key="BEHATWWWROOT" value="http://localhost:8000"/>
                </replacetokens>
            </filterchain>
        </copy>

        <!-- Create Moodle database. -->
        <echo message="Creating database for Moodle"/>
        <exec command="${DB.CREATE}" passthru="true" level="info" checkreturn="true"/>

        <!-- Create ignore file, install the plugin and create the build properties file. -->
        <echo message="Installing the plugin into Moodle"/>
        <exec command="${project.basedir}/bin/helper ignorefile --not-paths ${IGNORE_PATHS} --not-names ${IGNORE_NAMES} -- ${TRAVIS_BUILD_DIR}" passthru="true" level="info" checkreturn="true"/>
        <exec command="${project.basedir}/bin/helper installplugin ${TRAVIS_BUILD_DIR}" dir="${MOODLE_DIR}" passthru="true" level="info" checkreturn="true"/>
        <exec command="${project.basedir}/bin/helper pluginproperties ${TRAVIS_BUILD_DIR} ${PROPERTIES_FILE}" dir="${MOODLE_DIR}" passthru="true" level="info" checkreturn="true"/>

        <!-- Install Code Checker. -->
        <echo message="Installing the Moodle Code Checker plugin into Moodle"/>
        <gitclone repository="git://github.com/moodlehq/moodle-local_codechecker.git" targetPath="${MOODLE_DIR}/local/codechecker"/>
        <gitcheckout repository="${MOODLE_DIR}/local/codechecker" create="true" branchname="working" startpoint="${MOODLE_CODE_CHECKER_VERSION}"/>

        <!-- Install Moodle Composer dependencies. -->
        <echo message="Installing Moodle Composer dependencies"/>
        <exec command="composer install -n" dir="${MOODLE_DIR}" passthru="true" level="info" checkreturn="true"/>

        <!-- This is a flag to let us know that Moodle is ready and completely built. -->
        <append destFile="${PROPERTIES_FILE}" text="${line.separator}MOODLE_READY=true"/>
    </target>

    <target name="BehatDependencies" hidden="true">
        <!-- Download Selenium and start it. -->
        <echo message="Downloading Selenium JAR file"/>
        <exec command="curl -o ${project.basedir}/selenium.jar http://selenium-release.storage.googleapis.com/2.45/selenium-server-standalone-2.45.0.jar" passthru="true" level="info" checkreturn="true"/>
        <echo message="Starting Selenium server"/>
        <exec command="${project.basedir}/bin/start_selenium ${project.basedir}/selenium.jar" passthru="true" level="info" checkreturn="true"/>

        <!-- Start PhantomJS. -->
        <echo message="Starting PhantomJS"/>
        <exec command="${project.basedir}/bin/start_phantomjs" passthru="true" level="info" checkreturn="true"/>

        <!-- Start PHP server. -->
        <echo message="Starting PHP server"/>
        <exec command="${project.basedir}/bin/start_phpserver" dir="${MOODLE_DIR}" passthru="true" level="info" checkreturn="true"/>

        <!-- Initialize Behat. -->
        <if>
            <available property="BEHAT_UTIL_EXISTS" file="${MOODLE_DIR}/admin/tool/behat/cli/util_single_run.php"/>
            <then>
                <!-- Moodle 2.9 or later. -->
                <property name="BEHAT_UTIL" value="${MOODLE_DIR}/admin/tool/behat/cli/util_single_run.php"/>
            </then>
            <else>
                <!-- Moodle 2.8 or earlier. -->
                <property name="BEHAT_UTIL" value="${MOODLE_DIR}/admin/tool/behat/cli/util.php"/>
            </else>
        </if>

        <echo message="Initialize Behat in Moodle"/>
        <exec command="php ${BEHAT_UTIL} --install" passthru="true" level="info" checkreturn="true"/>
        <exec command="php ${BEHAT_UTIL} --enable" passthru="true" level="info" checkreturn="true"/>

        <!-- This is a flag to let us know that Behat is ready to run. -->
        <append destFile="${PROPERTIES_FILE}" text="${line.separator}BEHAT_READY=true"/>
    </target>

    <target name="PHPUnitDependencies" hidden="true">
        <echo message="Initialize PHPUnit in Moodle"/>
        <exec command="php ${MOODLE_DIR}/admin/tool/phpunit/cli/util.php --install" passthru="true" level="info" checkreturn="true"/>
        <exec command="php ${MOODLE_DIR}/admin/tool/phpunit/cli/util.php --buildconfig" passthru="true" level="info" checkreturn="true"/>

        <!-- This is a flag to let us know that PHPUnit is ready to run. -->
        <append destFile="${PROPERTIES_FILE}" text="${line.separator}PHPUNIT_READY=true"/>
    </target>

    <target name="OtherDependencies" hidden="true">
        <!-- Other dependencies to install for code quality. -->

        <echo message="Installing NodeJS dependencies"/>
        <exec command="npm install -g jshint csslint shifter@0.4.6" passthru="true" level="info" checkreturn="true"/>
    </target>
</project>
